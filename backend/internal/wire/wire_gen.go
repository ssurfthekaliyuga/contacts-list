// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"contacts-list/internal/app"
	"contacts-list/internal/common/logger"
	"contacts-list/internal/config"
	"contacts-list/internal/domain/usecases"
	"contacts-list/internal/primary/rest/controllers"
	"contacts-list/internal/primary/rest/endpoints"
	"contacts-list/internal/primary/rest/fiber"
	"contacts-list/internal/secondary/postgres"
	"contacts-list/pkg/sl"
	"context"
	"github.com/jackc/pgx/v5/pgxpool"
)

// Injectors from wire.go:

func Wire(contextContext context.Context, configConfig config.Config) (*app.App, func(), error) {
	loggerConfig := provideLoggerConfig(configConfig)
	slLogger, err := logger.NewLogger(loggerConfig)
	if err != nil {
		return nil, nil, err
	}
	fiberConfig := provideFiberConfig(configConfig)
	v1Config := provideEndpointsConfig(configConfig)
	postgresConfig := providePostgresConfig(configConfig)
	pool, cleanup, err := postgres.New(contextContext, slLogger, postgresConfig)
	if err != nil {
		return nil, nil, err
	}
	contacts := provideContacts(slLogger, pool)
	server, cleanup2, err := provideFiber(contextContext, slLogger, fiberConfig, v1Config, contacts)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	v := provideRunners(server)
	appApp := app.New(slLogger, v...)
	return appApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func provideLoggerConfig(cfg config.Config) logger.Config {
	return cfg.Logger()
}

func providePostgresConfig(cfg config.Config) postgres.Config {
	return cfg.Postgres()
}

func provideFiberConfig(cfg config.Config) fiber.Config {
	return cfg.FiberServer()
}

func provideEndpointsConfig(cfg config.Config) endpoints.V1Config {
	return cfg.EndpointsV1()
}

func provideRunners(fiberSrv *fiber.Server) []app.Runner {
	return []app.Runner{fiberSrv}
}

func provideFiber(ctx context.Context, logger2 sl.Logger, srvConf fiber.Config, v1conf endpoints.V1Config, controllers2 *controllers.Contacts) (*fiber.Server, func(), error) {
	srv, stop, err := fiber.New(ctx, logger2, srvConf)
	if err != nil {
		return nil, nil, err
	}

	router, err := endpoints.RegisterV1(srv, logger2, v1conf)
	if err != nil {
		return nil, nil, err
	}
	endpoints.RegisterContacts(controllers2, router)

	return srv, stop, nil
}

func provideContacts(l sl.Logger, pool *pgxpool.Pool) *controllers.Contacts {
	repo := postgres.NewContacts(pool)
	use := usecases.NewContacts(repo, l)
	return controllers.NewContacts(use)
}
